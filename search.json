[{"title":"通过CentOS的Docker部署calibre-web搭建私人电子图书馆","url":"/2021/01/13/docker-web%E6%90%AD%E5%BB%BA/","content":"<h3 id=\"前期准备工作\"><a href=\"#前期准备工作\" class=\"headerlink\" title=\"前期准备工作\"></a>前期准备工作</h3><ul>\n<li><p>本地电脑安装Calibre, windows|Mac|Linux各种版本都有，建立本地的书库目录books用于存放电子书及metadata数据库，我这里用的是windows；</p>\n</li>\n<li><p>在windows是安装好与服务器连接的软件Xshell和用于传输文件的Sftp，或是其它同样功能的软件也可以</p>\n</li>\n<li><p>准备好服务器，我这里是选用的centos7，有NAS的也一样可以下载docker进行部署</p>\n<a id=\"more\"></a>\n\n</li>\n</ul>\n<h3 id=\"搭建calibre-web应用\"><a href=\"#搭建calibre-web应用\" class=\"headerlink\" title=\"搭建calibre-web应用\"></a>搭建calibre-web应用</h3><ul>\n<li><p>首先通过<code>docker -v</code> 检查是否安装了docker, 如果未安装通过以下命令安装： <code>curl -fsSL https://get.docker.com | bash -s docker --mirror Aliyun</code> 是否需要使用Aliyun镜像看个人情况。</p>\n<img src=\"http://penney.oss-cn-shenzhen.aliyuncs.com/typora/pull_error.png\" alt=\"docker_version\" style=\"zoom:100%;\">  \n\n\n\n</li>\n</ul>\n<ul>\n<li><p>使用docker命令从github拉取calibre-web应用，github上下载量较高有以下3个：linuxserver/calibre-web，technosoft2000/calibre-web，janeczku/calibre-web, 我用的是第1个，有不少同学说linuxserver/calibre-web不能进行格式转换，但通过正常配置是可以正常转换格式的；<code>docker pull linuxserver/calibre-web</code> 拉取应用，</p>\n<img src=\"http://penney.oss-cn-shenzhen.aliyuncs.com/typora/install_calibre.png\" alt=\"pull_error\" style=\"zoom:100%;\">  \n\n\n\n</li>\n</ul>\n<p>  如果报错<code>Cannot connect to the Docker daemon at unix:///var/run/docker.sock. Is the docker daemon running?</code> 说明docker应用进程没有正常启动 ，需要先手动启动<code>systemctl restart docker.service</code>，再拉取应用。</p>\n<ul>\n<li><p>在docker中创建calibre-web应用：</p>\n<p><code>docker create \\    --name=calibre-web \\    -e PUID=1000 \\    -e PGID=1000 \\    -e TZ=Asia/Shanghai \\ -p 8083:8083 \\    -e DOCKER_MODS=linuxserver/calibre-web:calibre \\ -v /data/calibre/config:/config \\    -v /data/calibre/books:/books \\ --restart unless-stopped \\    linuxserver/calibre-web</code></p>\n<p>关键参数说明：<code>--name=calibre-web</code>应用名称， <code>-p 8083:8083</code> 端口映射，配置成功后通过该 端口访问，记得防火墙中要放开该端口，否则无法访问 ，<code>-e DOCKER_MODS=linuxserver/calibre-web:calibre</code>是否需要支持格式功能，仅x86_64的cpu支持（但还需要在calibre-web中进行配置），<code>-v /data/calibre/config:/config</code>服务器本地与calibre应用配置文件夹映射关系，用于存放用户数据等，<code>-v /data/calibre/books:/books</code>服务器本地与calibre书籍目录映射关系。</p>\n<img src=\"http://penney.oss-cn-shenzhen.aliyuncs.com/typora/mkdir.png\" alt=\"install_calibre\" style=\"zoom:100%;\">\n\n\n\n</li>\n</ul>\n<ul>\n<li><p>在centos中使用mkdir命令创建目录/data/calibre/books和/data/calibre/config，并授予文件夹读写权限</p>\n<img src=\"http://penney.oss-cn-shenzhen.aliyuncs.com/typora/docker_version.png\" alt=\"mkdir\" style=\"zoom:100%;\">\n</li>\n<li><p>在windows下Calibre本地书库中books，使用xftp将本地windows书库中的所有电子书导入到centos服务器<code>/data/calibre/books</code> 目录下，注意：books目录下的除了所有书籍文件夹上传外，metadata.db数据库也一并上传到centos7中的/data/calibre/books目录下，不然会报“数据库路径无效，请输入正确的路径”</p>\n<img src=\"http://penney.oss-cn-shenzhen.aliyuncs.com/typora/base_config.png\" alt=\"tanslate_books\" style=\"zoom:100%;\">\n</li>\n<li><p>在服务中开启calibre-web应用<code>docker start calibre-web</code>, 通过浏览器打开<code>http://host:8083</code>进入calibre-web，在calibre书库配置中填写<code>/books</code>即映射到centos服务器中的<code>/data/calibre/books</code>目录下；如果提示“数据库路径无效，请输入正确的路径”，在本地windows中Calibre软件重新创建一个书库文件夹，并将其文件夹下的metadata.db文件单独上传上述centos服务器路径；并对文件夹授予读写权限<code> chmod -R 777 /data/calibre/</code></p>\n<img src=\"http://penney.oss-cn-shenzhen.aliyuncs.com/typora/login.png\" alt=\"base_config\" style=\"zoom:100%;\">\n</li>\n<li><p>使用管理员账号admin/admin123登录calibre-web，并在设置中心修改为语言为中文</p>\n<img src=\"http://penney.oss-cn-shenzhen.aliyuncs.com/typora/translate_books.png\" alt=\"login\" style=\"zoom:100%;\">\n</li>\n<li><p>登录成功，界面默认为英文</p>\n<img src=\"http://penney.oss-cn-shenzhen.aliyuncs.com/typora/lang_config.png\" alt=\"login_success\" style=\"zoom:75%;\">\n</li>\n<li><p>点击用户名admin，在Language下修改语言为中文</p>\n<img src=\"http://penney.oss-cn-shenzhen.aliyuncs.com/typora/convert_router.png\" alt=\"lang_config\" style=\"zoom:100%;\">\n</li>\n<li><p>修改成功的中文界面</p>\n<img src=\"http://penney.oss-cn-shenzhen.aliyuncs.com/typora/add_permision.png\" alt=\"lang_cn\" style=\"zoom:100%;\">\n\n\n\n</li>\n</ul>\n<h3 id=\"Calibre-web功能进阶：格式转换-amp-邮件转发至Kindle\"><a href=\"#Calibre-web功能进阶：格式转换-amp-邮件转发至Kindle\" class=\"headerlink\" title=\"Calibre-web功能进阶：格式转换 &amp;邮件转发至Kindle\"></a>Calibre-web功能进阶：格式转换 &amp;邮件转发至Kindle</h3><ul>\n<li><p>登录管理员账号找到 管理权限 - 配置 - 编辑基本配置 - 扩展程序配置，在“Calibre电子书转换路径”栏中填写 <code>/usr/bin/ebook-convert</code> 在Unrar程序路径填<code>/usr/bin/unrar</code>，</p>\n<p><img src=\"http://penney.oss-cn-shenzhen.aliyuncs.com/typora/lang_cn.png\" alt=\"convert_router\"></p>\n<p>注意在容器创建时添加了参数<code>-e DOCKER_MODS=linuxserver/calibre-web:calibre</code> 才能支持格式转换，另外，还需要在centos下新建目录并在路径下添加权限、添加权限、添加权限，重要的事说3遍，<code>chmod -R 777 /usr/bin/ebook-convert</code> </p>\n<p><img src=\"http://penney.oss-cn-shenzhen.aliyuncs.com/typora/convert-book.png\" alt=\"add_permision\"></p>\n</li>\n<li><p>在书籍编辑界面对书籍进行格式转换，在任务列表中可以查看转换进度，如果没有给目录<code>/usr/bin/ebook-convert</code>添加权限，在转换进度的最后时刻会提示失败。</p>\n<p><img src=\"http://penney.oss-cn-shenzhen.aliyuncs.com/typora/convert-success.png\" alt=\"convert-book\"></p>\n<p>转换成功：</p>\n<p><img src=\"http://penney.oss-cn-shenzhen.aliyuncs.com/typora/config_email.png\" alt=\"convert-success\"></p>\n</li>\n<li><p>设置将电子书通过邮件发送到kindle邮箱，以163为例，首行登录到邮箱首页，找到设置 - POP3/SMTP/IMAP</p>\n<p><img src=\"http://penney.oss-cn-shenzhen.aliyuncs.com/typora/smtp_code.png\" alt=\"login_email\"></p>\n<p>然后打开IMAP/SMTP服务，接着新增授权码，记住该码</p>\n<p><img src=\"http://penney.oss-cn-shenzhen.aliyuncs.com/typora/login_email.png\" alt=\"smtp_code\"></p>\n</li>\n<li><p>登录管理员账号找到 管理权限 - SMTP邮件服务器配置 - 编辑邮件服务器配置，按下图填写信息，其中SMTP密码就是上一步中从163邮箱中获取到的授权密码，保存，在查看书籍信息时右上角就有转发到邮件的选项了，但是为了让你的kindle可以正常接收到电子书邮件，还需要登录你的亚马逊账户，在设置中添加可依赖的发件邮箱，即上面的163邮箱。</p>\n<p><img src=\"http://penney.oss-cn-shenzhen.aliyuncs.com/typora/config_email.png\" alt=\"config_email\"></p>\n</li>\n</ul>\n","categories":["瞎折腾"],"tags":["centos","docker","calibre-web","电子书"]},{"title":"数据结构_线性表","url":"/2021/07/19/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84_%E7%BA%BF%E6%80%A7%E8%A1%A8/","content":"<h4 id=\"线性结构-线性表的顺序存储表示及其操作\"><a href=\"#线性结构-线性表的顺序存储表示及其操作\" class=\"headerlink\" title=\"线性结构 - 线性表的顺序存储表示及其操作\"></a>线性结构 - 线性表的顺序存储表示及其操作</h4><h5 id=\"结构组成\"><a href=\"#结构组成\" class=\"headerlink\" title=\"结构组成\"></a>结构组成</h5><ol>\n<li>实际存储元素的数组Data[MAXSIZE]</li>\n<li>游标，指向最后一个元素Last</li>\n</ol>\n<h5 id=\"创建\"><a href=\"#创建\" class=\"headerlink\" title=\"创建\"></a>创建</h5><a id=\"more\"></a>\n\n<ol>\n<li>动态申请大小为一个List的内存,也可以指定其数组的大小</li>\n<li>初始化游标Last为-1</li>\n</ol>\n<h5 id=\"查找\"><a href=\"#查找\" class=\"headerlink\" title=\"查找\"></a>查找</h5><ol>\n<li>遍历数组，直到数组最后一个元素或找到元素X</li>\n<li>如果i大于最后一个元素，表示未找到，否则已找到</li>\n</ol>\n<h5 id=\"插入\"><a href=\"#插入\" class=\"headerlink\" title=\"插入\"></a>插入</h5><ol>\n<li>先判断表是否已满</li>\n<li>判断插入的位序是否合法</li>\n<li>循环遍历从末位向后复制，空出第i+1的位置</li>\n<li>将新元素X赋值给i+i，完成插入</li>\n<li>游标Last加1</li>\n</ol>\n<h5 id=\"删除\"><a href=\"#删除\" class=\"headerlink\" title=\"删除\"></a>删除</h5><ol>\n<li>先判断是删除的位置是否合法</li>\n<li>循环遍历从第i位之后的元素向前移一位，将第i个元素覆盖</li>\n<li>游标Last减1</li>\n</ol>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdbool.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> MAXSIZE 10</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> ERROR -1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">int</span> Position; <span class=\"comment\">// 位置</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">int</span> ElementType; <span class=\"comment\">// 元素</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">LNode</span> *<span class=\"title\">PtrToLNode</span>;</span><span class=\"comment\">// 结构体起始位置</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">LNode</span> &#123;</span></span><br><span class=\"line\">    <span class=\"comment\">// 1.实际存储元素的数组</span></span><br><span class=\"line\">    ElementType Data[MAXSIZE];</span><br><span class=\"line\">    <span class=\"comment\">// 2.游标，指向最后一个元素</span></span><br><span class=\"line\">    Position Last; </span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> PtrToLNode List;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 创建</span></span><br><span class=\"line\"><span class=\"function\">List <span class=\"title\">MakeEmpty</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    List L;</span><br><span class=\"line\">    <span class=\"comment\">// 1. 动态申请大小为一个List的内存,也可以指定其数组的大小</span></span><br><span class=\"line\">    L = (List) <span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(struct LNode));</span><br><span class=\"line\">    <span class=\"comment\">// 2. 初始化游标Last为-1</span></span><br><span class=\"line\">    L-&gt;Last = <span class=\"number\">-1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> L;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 查找</span></span><br><span class=\"line\"><span class=\"function\">Position <span class=\"title\">Find</span><span class=\"params\">(List L, ElementType X)</span> </span>&#123;</span><br><span class=\"line\">    Position i = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 1. 遍历数组，直到数组最后一个元素或找到元素X</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (i &lt;= L-&gt;Last &amp;&amp; L-&gt;Data[i] != X) &#123;</span><br><span class=\"line\">        i++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 2. 如果i大于最后一个元素，表示未找到，否则已找到</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (i &gt; L-&gt;Last) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ERROR;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> i;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 插入</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">Insert</span><span class=\"params\">(List L, ElementType X, <span class=\"keyword\">int</span> i)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 1.先判断表是否已满</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (L-&gt;Last == MAXSIZE - <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;表满&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 2.判断插入的位序是否合法</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (i &lt; <span class=\"number\">1</span> || i &gt; L-&gt;Last + <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;位序不合法&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    Position j;</span><br><span class=\"line\">    <span class=\"comment\">// 3.循环遍历从末位向后复制，空出第i+1的位置</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (j = L-&gt;Last; j &gt;= i - <span class=\"number\">1</span>; j--) &#123;</span><br><span class=\"line\">        L-&gt;Data[j + <span class=\"number\">1</span>] = L-&gt;Data[j];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 4.将新元素X赋值给i+i，完成插入</span></span><br><span class=\"line\">    L-&gt;Data[i - <span class=\"number\">1</span>] = X;</span><br><span class=\"line\">    <span class=\"comment\">// 5. 游标Last加1</span></span><br><span class=\"line\">    L-&gt;Last++;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 删除操作</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">Delete</span><span class=\"params\">(List L, <span class=\"keyword\">int</span> i)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 1. 先判断是删除的位置是否合法</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (i &lt; <span class=\"number\">1</span> || i &gt; L-&gt;Last) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;位序%d不正确&quot;</span>, i);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    Position j;</span><br><span class=\"line\">    <span class=\"comment\">// 2.循环遍历从第i位之后的元素向前移一位，将第i个元素覆盖</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (j = i - <span class=\"number\">1</span>; j &lt; L-&gt;Last; j++) &#123;</span><br><span class=\"line\">        L-&gt;Data[j] = L-&gt;Data[j + <span class=\"number\">1</span>];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 3. 游标Last减1</span></span><br><span class=\"line\">    L-&gt;Last--;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<h4 id=\"线性结构-线性表的链式存储表示及其操作\"><a href=\"#线性结构-线性表的链式存储表示及其操作\" class=\"headerlink\" title=\"线性结构 - 线性表的链式存储表示及其操作\"></a>线性结构 - 线性表的链式存储表示及其操作</h4><h5 id=\"结构\"><a href=\"#结构\" class=\"headerlink\" title=\"结构\"></a>结构</h5><ol>\n<li>当前结点的数据Data</li>\n<li>下一个结点Next</li>\n</ol>\n<h5 id=\"求表长\"><a href=\"#求表长\" class=\"headerlink\" title=\"求表长\"></a>求表长</h5><ol>\n<li>循环遍历，并累加变量len</li>\n</ol>\n<h5 id=\"查找（按位序）\"><a href=\"#查找（按位序）\" class=\"headerlink\" title=\"查找（按位序）\"></a>查找（按位序）</h5><ol>\n<li>位序从第一个元素开始</li>\n<li>p指向第一个结点</li>\n<li>如果指针到指定的index还没有找到，或是扫描到最后的元素NULL,则退出</li>\n<li>指针指向index位置，同时不为NULL</li>\n</ol>\n<h5 id=\"查找（按元素）\"><a href=\"#查找（按元素）\" class=\"headerlink\" title=\"查找（按元素）\"></a>查找（按元素）</h5><ol>\n<li>p指向第一个结点</li>\n<li>当指针遍历到最后为NULL或是找到元素X，则退出</li>\n<li>如果p不为NULL，表示找到元素，返回p，否则返回NULL</li>\n</ol>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> ERROR -1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">int</span> ElementType; <span class=\"comment\">// 元素</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">LNode</span> *<span class=\"title\">PtrToLNode</span>;</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">LNode</span> &#123;</span></span><br><span class=\"line\">    <span class=\"comment\">// 1. 当前结点的数据Data</span></span><br><span class=\"line\">    ElementType Data;</span><br><span class=\"line\">    <span class=\"comment\">// 2. 下一个结点Next</span></span><br><span class=\"line\">    PtrToLNode Next;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> PtrToLNode Position;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> PtrToLNode List;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 求表长</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">Length</span><span class=\"params\">(PtrToLNode L)</span> </span>&#123;</span><br><span class=\"line\">    Position P;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> len = <span class=\"number\">0</span>;</span><br><span class=\"line\">    P = L;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (P) &#123;</span><br><span class=\"line\">        P = P-&gt;Next;</span><br><span class=\"line\">        len++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> len;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 查找,按index</span></span><br><span class=\"line\"><span class=\"function\">ElementType <span class=\"title\">FindElementByIndex</span><span class=\"params\">(List L, <span class=\"keyword\">int</span> index)</span> </span>&#123;</span><br><span class=\"line\">    Position p;</span><br><span class=\"line\">    <span class=\"comment\">// 1. 位序从第一个元素开始</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> cnt = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 2. p指向第一个结点</span></span><br><span class=\"line\">    p = L;</span><br><span class=\"line\">    <span class=\"comment\">// 3. 如果指针到指定的index还没有找到，或是扫描到最后的元素NULL,则退出</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (cnt &lt; index &amp;&amp; p) &#123;</span><br><span class=\"line\">        p = p-&gt;Next;</span><br><span class=\"line\">        cnt++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 4. 指针指向index位置，同时不为NULL</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (cnt == index &amp;&amp; p) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> p-&gt;Data;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ERROR;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 查找，按元素</span></span><br><span class=\"line\"><span class=\"function\">Position <span class=\"title\">FindElement</span><span class=\"params\">(List L, ElementType X)</span> </span>&#123;</span><br><span class=\"line\">    Position p;</span><br><span class=\"line\">    <span class=\"comment\">// 1. p指向第一个结点</span></span><br><span class=\"line\">    p = L;</span><br><span class=\"line\">    <span class=\"comment\">// 2. 当指针遍历到最后为NULL或是找到元素X，则退出</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (p &amp;&amp; p-&gt;Next != X) &#123;</span><br><span class=\"line\">        p = p-&gt;Next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 3. 如果不为NULL，表示找到元素，返回p，否则返回NULL</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (p) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> p;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","tags":["线性表"]},{"title":"Android自定义控件小结","url":"/2021/01/14/Android%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8E%A7%E4%BB%B6%E5%B0%8F%E7%BB%93/","content":"<h3 id=\"绘制文本drawText\"><a href=\"#绘制文本drawText\" class=\"headerlink\" title=\"绘制文本drawText\"></a>绘制文本<code>drawText</code></h3><ul>\n<li><p>计算文本的宽度、高度</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">float</span> textWidth = paint.measureText(text);</span><br><span class=\"line\">Paint.FontMetrics fontMetrics = paint.getFontMetrics();</span><br><span class=\"line\"><span class=\"keyword\">float</span> textHeight = fontMetrics.top - fontMetrics.bottom;</span><br></pre></td></tr></table></figure></li>\n<li><p>绘制文本，文本绘制起始点在文本矩形的左下角，注意起始点(floatX, floatY)</p>\n<a id=\"more\"></a>\n\n<p><code>canvas.drawText(text, floatX, floatY, paint);</code> </p>\n</li>\n<li><p>利用path绘制倾斜文本</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">Path path = <span class=\"keyword\">new</span> Path();</span><br><span class=\"line\">path.moveTo(floatX, floatY);<span class=\"comment\">//移到起始点</span></span><br><span class=\"line\">path.lineTo(endX, endY);<span class=\"comment\">// 描路径</span></span><br><span class=\"line\">canvas.drawTextOnPath(text, path, <span class=\"number\">0</span>, <span class=\"number\">0</span>, paint);</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h3 id=\"绘制圆角矩形\"><a href=\"#绘制圆角矩形\" class=\"headerlink\" title=\"绘制圆角矩形\"></a>绘制圆角矩形</h3><ul>\n<li><p>直接绘制<code>drawRoundRect</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">RectF rect = <span class=\"keyword\">new</span> RectF(left, top, right, bottom);</span><br><span class=\"line\">paint.setStyle(Paint.Style.FILL);</span><br><span class=\"line\">canvas.drawRoundRect(rect, floatRX, floatRY, paint);</span><br></pre></td></tr></table></figure></li>\n<li><p>通过裁剪路径<code>clipPath</code>得到，但画布可绘制范围只剩该矩形区域</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">float</span> r = <span class=\"number\">3</span>; </span><br><span class=\"line\"><span class=\"keyword\">float</span>[] radiusArray = &#123;r,r, r,r, r,r, r,r&#125;;<span class=\"comment\">//对应左、上、右、下四个角的圆角半径</span></span><br><span class=\"line\">Path path = <span class=\"keyword\">new</span> Path();</span><br><span class=\"line\">RectF rect = <span class=\"keyword\">new</span> RectF(left, right, top, bottom);</span><br><span class=\"line\">path.addRoundRect(rect, radiusArray, Path.Direction.CW);</span><br><span class=\"line\">canvas.clipPath(path);</span><br></pre></td></tr></table></figure>\n\n\n</li>\n</ul>\n<h3 id=\"绘制圆弧drawArc\"><a href=\"#绘制圆弧drawArc\" class=\"headerlink\" title=\"绘制圆弧drawArc\"></a>绘制圆弧<code>drawArc</code></h3><ul>\n<li><p>默认按顺时针方向绘制，设置圆弧所在区域矩形、起始的角度、扫过的角度</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">RectF rect = <span class=\"keyword\">new</span> RectF(left, top, right, bottom);</span><br><span class=\"line\">paint.setStyle(Paint.Style.STROKE);</span><br><span class=\"line\">paint.setStrokeCap(Paint.Cap.ROUND);<span class=\"comment\">// 设置描边线为圆角类型</span></span><br><span class=\"line\">canvas.drawArc(rect, startAngle, sweepAngle, <span class=\"keyword\">false</span>, paint);</span><br></pre></td></tr></table></figure></li>\n<li><p>设置圆弧渐变色</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 位置数组与色值数组对应</span></span><br><span class=\"line\"><span class=\"keyword\">int</span>[] GRADIENT_COLORS = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[]&#123;Color.parseColor(<span class=\"string\">&quot;#F257B0&quot;</span>), Color.parseColor(<span class=\"string\">&quot;#688FFD&quot;</span>)&#125;;</span><br><span class=\"line\"><span class=\"comment\">// 取值范围0-1，0和1为3点钟位置，0.25为6点钟位置，0.5为9点钟位置，0.75为12点位置</span></span><br><span class=\"line\"><span class=\"keyword\">float</span>[] GRADIENT_POSITION = <span class=\"keyword\">new</span> <span class=\"keyword\">float</span>[]&#123;<span class=\"number\">0.45f</span>, <span class=\"number\">1.0f</span>&#125;;</span><br><span class=\"line\">SweepGradient gradient = <span class=\"keyword\">new</span> SweepGradient(cx, cy, GRADIENT_COLORS, GRADIENT_POSITION);</span><br><span class=\"line\">paint.setShader(gradient);</span><br><span class=\"line\">canvas.drawArc(rect, startAngle, sweepAngle, <span class=\"keyword\">false</span>, paint);</span><br></pre></td></tr></table></figure>\n\n\n</li>\n</ul>\n<h3 id=\"其它\"><a href=\"#其它\" class=\"headerlink\" title=\"其它\"></a>其它</h3><ul>\n<li><p>androd屏幕坐标参考系，水平右方向为x轴正方向，水平左方向为x轴负方向，竖直下方向为y轴正方向，竖直上方向为y轴负方向；</p>\n</li>\n<li><p>画布<code>canvas</code>基本操作</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">canvas.translate(dx, dy); <span class=\"comment\">// 移动画布中心</span></span><br><span class=\"line\">canvas.rotate(degree); <span class=\"comment\">// 画布旋转角度degree</span></span><br></pre></td></tr></table></figure>\n\n\n</li>\n</ul>\n<ul>\n<li><p>绘制时使用屏幕的实际尺寸，不能直接使用<code>3px</code>;</p>\n<p><code>int width = context.getResources().getDimensionPixelSize(R.dimen.dp_3px);</code></p>\n</li>\n<li><p>Math类的常用运算</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">Math.toRadians(<span class=\"number\">180</span>);<span class=\"comment\">//角度转弧度</span></span><br><span class=\"line\">Math.toDegrees(pi);<span class=\"comment\">//弧度转角度</span></span><br><span class=\"line\">Math.sin(radians);<span class=\"comment\">//计算三角函数sin值，传入弧度</span></span><br><span class=\"line\">Math.ceil(<span class=\"number\">12.7</span>);<span class=\"comment\">//得13 取天花板值</span></span><br><span class=\"line\">Math.floor(<span class=\"number\">12.7</span>);<span class=\"comment\">//得12 取地板值</span></span><br><span class=\"line\">Math.sqrt(<span class=\"number\">4</span>);<span class=\"comment\">// 求开方</span></span><br><span class=\"line\">Math.pow(x,y);<span class=\"comment\">//求x的y次方</span></span><br><span class=\"line\">Math.round(x);<span class=\"comment\">//求整，四舍五入</span></span><br><span class=\"line\">Math.min(x,y); <span class=\"comment\">//最小值</span></span><br><span class=\"line\">Math.max(x,y); <span class=\"comment\">//最大值\t</span></span><br><span class=\"line\">Math.abs(x);<span class=\"comment\">//绝对值</span></span><br><span class=\"line\">Math.random();<span class=\"comment\">// 返回0-1随机数</span></span><br></pre></td></tr></table></figure></li>\n<li><p>浮点数保持精度计算<code>BigDecimal</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">BigDecimal bigDecimal = <span class=\"keyword\">new</span> BigDecimal(<span class=\"string\">&quot;3.14159&quot;</span>);</span><br><span class=\"line\">bigDecimal.setScale(<span class=\"number\">2</span>, BigDecimal.ROUND_DOWN);<span class=\"comment\">// 取小数点后2位</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>动画动态取值<code>ValueAnimator</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">ValueAnimator animator = ValueAnimator.ofInt(startValue, endValue);</span><br><span class=\"line\">animator.setDuration(<span class=\"number\">3000</span>);<span class=\"comment\">// 设置动画持续时长</span></span><br><span class=\"line\">animator.addUpdateListener(<span class=\"keyword\">new</span> ValueAnimator.AnimatorUpdateListener() &#123;</span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onAnimationUpdate</span><span class=\"params\">(ValueAnimator valueAnimator)</span> </span>&#123;</span><br><span class=\"line\">    \t<span class=\"comment\">// 在duration时长内，返回startValue-endValue区间的值,根据不同的值重绘界面，形成动态</span></span><br><span class=\"line\">  \t\t<span class=\"keyword\">int</span> value = (<span class=\"keyword\">int</span>) valueAnimator.getAnimatedValue();</span><br><span class=\"line\">    \tLog.d(TAG, <span class=\"string\">&quot;animator value:&quot;</span> + value);</span><br><span class=\"line\">                    </span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n\n</li>\n</ul>\n","categories":["工作小结"],"tags":["android","自定义控件"]},{"title":"recyclerView使用小结(一)","url":"/2021/01/20/recyclerview_use1/","content":"<h3 id=\"recyclerView-Adapter主要方法及执行顺序\"><a href=\"#recyclerView-Adapter主要方法及执行顺序\" class=\"headerlink\" title=\"recyclerView.Adapter主要方法及执行顺序\"></a>recyclerView.Adapter主要方法及执行顺序</h3><ul>\n<li><p>recyclerview适配器Adapter中主要方法有构造方法、onCreateViewHolder、onBindViewHolder、getItemViewType、getItemCount五个主要方法；</p>\n</li>\n<li><p>主要的方法的执行顺序为：构造方法 –&gt; getItemViewType –&gt; onCreateViewHolder –&gt; onBindViewHolder</p>\n<a id=\"more\"></a>\n\n</li>\n</ul>\n<h3 id=\"在同一个recyclerView中显示不同有UI并且每类UI的数据结构也不同\"><a href=\"#在同一个recyclerView中显示不同有UI并且每类UI的数据结构也不同\" class=\"headerlink\" title=\"在同一个recyclerView中显示不同有UI并且每类UI的数据结构也不同\"></a>在同一个recyclerView中显示不同有UI并且每类UI的数据结构也不同</h3><h4 id=\"针对不同的数据结构，先创建数据的基类IBaseData-定义不的类型常量如TYPE-FIRST-1及默认类型TYPE-NULL-1，对外暴露获取类型的方法与获取数据T的方法；\"><a href=\"#针对不同的数据结构，先创建数据的基类IBaseData-定义不的类型常量如TYPE-FIRST-1及默认类型TYPE-NULL-1，对外暴露获取类型的方法与获取数据T的方法；\" class=\"headerlink\" title=\"针对不同的数据结构，先创建数据的基类IBaseData,定义不的类型常量如TYPE_FIRST=1及默认类型TYPE_NULL=-1，对外暴露获取类型的方法与获取数据T的方法；\"></a>针对不同的数据结构，先创建数据的基类<code>IBaseData</code>,定义不的类型常量如TYPE_FIRST=1及默认类型TYPE_NULL=-1，对外暴露获取类型的方法与获取数据T的方法；</h4><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">IBaseData</span>&lt;<span class=\"title\">T</span>&gt; </span>&#123;</span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> TYPE_NULL = -<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> TYPE_FIRST = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> TYPE_SECOND = <span class=\"number\">2</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">setEntity</span><span class=\"params\">(T data)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\">T <span class=\"title\">getEntity</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">getType</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"新建类BaseDataImpl实现之前创建的数据基类IBaseData，通过构造方法传不同的数据类型的实例bean；\"><a href=\"#新建类BaseDataImpl实现之前创建的数据基类IBaseData，通过构造方法传不同的数据类型的实例bean；\" class=\"headerlink\" title=\"新建类BaseDataImpl实现之前创建的数据基类IBaseData，通过构造方法传不同的数据类型的实例bean；\"></a>新建类<code>BaseDataImpl</code>实现之前创建的数据基类<code>IBaseData</code>，通过构造方法传不同的数据类型的实例bean；</h4><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BaseDataImpl</span> <span class=\"keyword\">implements</span> <span class=\"title\">IBaseData</span> </span>&#123;</span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"keyword\">protected</span> Object object;</span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"keyword\">int</span> type;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">BaseDataImpl</span><span class=\"params\">(Object object, <span class=\"keyword\">int</span> type)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.object = object;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.type = type;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setEntity</span><span class=\"params\">(Object data)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.object = data;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">getEntity</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> object;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getType</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> type;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"针对不同的UI类型，创建所有viewHolder的基类BaseViewHolder，传入布局layoutId，统一创建当前类型的界面，再由不同子类通过findViewById去查找使用子控件；关键方法是bindViewHolder-IBaseData-data-int-position-来调用adapter的根方法onBindViewHolder-BaseViewHolder-holder-int-position-，这样就实现了不同界面的viewHolder处理不同界面的数据，各自不干扰；\"><a href=\"#针对不同的UI类型，创建所有viewHolder的基类BaseViewHolder，传入布局layoutId，统一创建当前类型的界面，再由不同子类通过findViewById去查找使用子控件；关键方法是bindViewHolder-IBaseData-data-int-position-来调用adapter的根方法onBindViewHolder-BaseViewHolder-holder-int-position-，这样就实现了不同界面的viewHolder处理不同界面的数据，各自不干扰；\" class=\"headerlink\" title=\"针对不同的UI类型，创建所有viewHolder的基类BaseViewHolder，传入布局layoutId，统一创建当前类型的界面，再由不同子类通过findViewById去查找使用子控件；关键方法是bindViewHolder(IBaseData data, int position)来调用adapter的根方法onBindViewHolder(BaseViewHolder holder, int position)，这样就实现了不同界面的viewHolder处理不同界面的数据，各自不干扰；\"></a>针对不同的UI类型，创建所有viewHolder的基类BaseViewHolder，传入布局layoutId，统一创建当前类型的界面，再由不同子类通过<code>findViewById</code>去查找使用子控件；关键方法是<code>bindViewHolder(IBaseData data, int position)</code>来调用adapter的根方法<code>onBindViewHolder(BaseViewHolder holder, int position)</code>，这样就实现了不同界面的viewHolder处理不同界面的数据，各自不干扰；</h4><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BaseViewHolder</span> <span class=\"keyword\">extends</span> <span class=\"title\">RecyclerView</span>.<span class=\"title\">ViewHolder</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">BaseViewHolder</span><span class=\"params\">(ViewGroup parent, <span class=\"keyword\">int</span> layoutId)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(inflateView(parent,layoutId));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> View <span class=\"title\">inflateView</span><span class=\"params\">(ViewGroup parent, <span class=\"keyword\">int</span> layoutId)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> LayoutInflater.from(parent.getContext()).inflate(layoutId, parent, <span class=\"keyword\">false</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> View <span class=\"title\">findViewById</span><span class=\"params\">(<span class=\"keyword\">int</span> viewId)</span></span>&#123;</span><br><span class=\"line\">       <span class=\"keyword\">return</span> itemView.findViewById(viewId);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">bindViewHolder</span><span class=\"params\">(IBaseData data, <span class=\"keyword\">int</span> position)</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"新建recyclerView的adapter类MyAdapter，实现构造方法、onCreateViewHolder、onBindViewHolder、getItemViewType、getItemCount五个主要方法，adapter类以List-lt-BaseDataImpl-gt-界面数据集合，根据BaseDataImpl的不同type来创建和绑定不同的viewHolder\"><a href=\"#新建recyclerView的adapter类MyAdapter，实现构造方法、onCreateViewHolder、onBindViewHolder、getItemViewType、getItemCount五个主要方法，adapter类以List-lt-BaseDataImpl-gt-界面数据集合，根据BaseDataImpl的不同type来创建和绑定不同的viewHolder\" class=\"headerlink\" title=\"新建recyclerView的adapter类MyAdapter，实现构造方法、onCreateViewHolder、onBindViewHolder、getItemViewType、getItemCount五个主要方法，adapter类以List&lt;BaseDataImpl&gt;界面数据集合，根据BaseDataImpl的不同type来创建和绑定不同的viewHolder;\"></a>新建recyclerView的adapter类<code>MyAdapter</code>，实现构造方法、onCreateViewHolder、onBindViewHolder、getItemViewType、getItemCount五个主要方法，adapter类以<code>List&lt;BaseDataImpl&gt;</code>界面数据集合，根据BaseDataImpl的不同type来创建和绑定不同的viewHolder;</h4><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyAdapter</span> <span class=\"keyword\">extends</span> <span class=\"title\">RecyclerView</span>.<span class=\"title\">Adapter</span>&lt;<span class=\"title\">BaseViewHolder</span>&gt; </span>&#123;</span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"keyword\">private</span> List&lt;BaseDataImpl&gt; mData;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">MyAdapter</span><span class=\"params\">(List&lt;BaseDataImpl&gt; mData)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.mData = mData;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setData</span><span class=\"params\">(List&lt;BaseDataImpl&gt; data)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.mData = data;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@NonNull</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> BaseViewHolder <span class=\"title\">onCreateViewHolder</span><span class=\"params\">(<span class=\"meta\">@NonNull</span> ViewGroup parent, <span class=\"keyword\">int</span> viewType)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (IBaseData.TYPE_FIRST == viewType) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> LeftTextViewHolder(parent, R.layout.item_left_text);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (IBaseData.TYPE_SECOND == viewType) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> RightTextViewHolder(parent, R.layout.item_right_text);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onBindViewHolder</span><span class=\"params\">(BaseViewHolder holder, <span class=\"keyword\">int</span> position)</span> </span>&#123;</span><br><span class=\"line\">        holder.bindViewHolder(mData.get(position), position);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getItemViewType</span><span class=\"params\">(<span class=\"keyword\">int</span> position)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> mData.get(position) == <span class=\"keyword\">null</span> ? IBaseData.TYPE_NULL: mData.get(position).getType();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getItemCount</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> mData == <span class=\"keyword\">null</span>? <span class=\"number\">0</span>: mData.size();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"其中LeftTextViewHolder是BaseViewHolder的实现类，对应的数据结构LeftData与界面布局item-left-text如下，RightData与LeftData数据结构一样，item-right-text布局靠右对齐，item-left-text靠左对齐；\"><a href=\"#其中LeftTextViewHolder是BaseViewHolder的实现类，对应的数据结构LeftData与界面布局item-left-text如下，RightData与LeftData数据结构一样，item-right-text布局靠右对齐，item-left-text靠左对齐；\" class=\"headerlink\" title=\"其中LeftTextViewHolder是BaseViewHolder的实现类，对应的数据结构LeftData与界面布局item_left_text如下，RightData与LeftData数据结构一样，item_right_text布局靠右对齐，item_left_text靠左对齐；\"></a>其中<code>LeftTextViewHolder</code>是<code>BaseViewHolder</code>的实现类，对应的数据结构<code>LeftData</code>与界面布局<code>item_left_text</code>如下，<code>RightData</code>与<code>LeftData</code>数据结构一样，<code>item_right_text</code>布局靠右对齐，<code>item_left_text</code>靠左对齐；</h4><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LeftData</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String title;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String subTitle;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">LeftData</span><span class=\"params\">(String title, String subTitle)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.title = title;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.subTitle = subTitle;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getTitle</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> title;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setTitle</span><span class=\"params\">(String title)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.title = title;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getSubTitle</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> subTitle;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setSubTitle</span><span class=\"params\">(String subTitle)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.subTitle = subTitle;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">RelativeLayout</span> <span class=\"attr\">xmlns:android</span>=<span class=\"string\">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:layout_width</span>=<span class=\"string\">&quot;match_parent&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:layout_height</span>=<span class=\"string\">&quot;wrap_content&quot;</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;TextView</span><br><span class=\"line\">        android:id=&quot;@+id/tv_title&quot;</span><br><span class=\"line\">        android:layout_width=&quot;wrap_content&quot;</span><br><span class=\"line\">        android:layout_height=&quot;wrap_content&quot;</span><br><span class=\"line\">        android:layout_alignParentLeft=&quot;true&quot;</span><br><span class=\"line\">        android:layout_alignParentTop=&quot;true&quot;</span><br><span class=\"line\">        android:layout_marginLeft=&quot;15dp&quot;</span><br><span class=\"line\">        android:paddingTop=&quot;15dp&quot;</span><br><span class=\"line\">        android:text=&quot;我是标题&quot;</span><br><span class=\"line\">        android:textColor=&quot;#000000&quot;</span><br><span class=\"line\">        android:textSize=&quot;16sp&quot; /&gt;</span><br><span class=\"line\">    </span><br><span class=\"line\">    &lt;TextView</span><br><span class=\"line\">        android:id=&quot;@+id/tv_subTitle&quot;</span><br><span class=\"line\">        android:layout_width=&quot;wrap_content&quot;</span><br><span class=\"line\">        android:layout_height=&quot;wrap_content&quot;</span><br><span class=\"line\">        android:layout_below=&quot;@id/tv_title&quot;</span><br><span class=\"line\">        android:layout_marginLeft=&quot;15dp&quot;</span><br><span class=\"line\">        android:layout_marginTop=&quot;8dp&quot;</span><br><span class=\"line\">        android:paddingBottom=&quot;15dp&quot;</span><br><span class=\"line\">        android:text=&quot;我是子标题&quot;</span><br><span class=\"line\">        android:textColor=&quot;#99000000&quot;</span><br><span class=\"line\">        android:textSize=&quot;12sp&quot; /&gt;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">RelativeLayout</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"在界面类RecyclerViewActivity中引中新建的adapter类，并传入不同类型的数据，如LeftData封装进BaseDataImpl统一由MyAdapter处理\"><a href=\"#在界面类RecyclerViewActivity中引中新建的adapter类，并传入不同类型的数据，如LeftData封装进BaseDataImpl统一由MyAdapter处理\" class=\"headerlink\" title=\"在界面类RecyclerViewActivity中引中新建的adapter类，并传入不同类型的数据，如LeftData封装进BaseDataImpl统一由MyAdapter处理\"></a>在界面类<code>RecyclerViewActivity</code>中引中新建的adapter类，并传入不同类型的数据，如<code>LeftData</code>封装进<code>BaseDataImpl</code>统一由<code>MyAdapter</code>处理</h4><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RecyclerViewActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">AppCompatActivity</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(<span class=\"meta\">@Nullable</span> Bundle savedInstanceState)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</span><br><span class=\"line\">        setContentView(R.layout.activity_recyclerview);</span><br><span class=\"line\"></span><br><span class=\"line\">        RecyclerView rvContent = (RecyclerView) findViewById(R.id.rv_content);</span><br><span class=\"line\">        rvContent.setLayoutManager(<span class=\"keyword\">new</span> LinearLayoutManager(<span class=\"keyword\">this</span>, LinearLayoutManager.VERTICAL, <span class=\"keyword\">false</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">        LeftData leftData = <span class=\"keyword\">new</span> LeftData(<span class=\"string\">&quot;我是主标题我是主标题&quot;</span>,<span class=\"string\">&quot;我是小标题我是小标题我是小标题&quot;</span>);</span><br><span class=\"line\">        BaseDataImpl leftImpl = <span class=\"keyword\">new</span> BaseDataImpl(leftData, IBaseData.TYPE_FIRST);</span><br><span class=\"line\"></span><br><span class=\"line\">        RightData rightData = <span class=\"keyword\">new</span> RightData(<span class=\"string\">&quot;我是主标题我是主标题&quot;</span>,<span class=\"string\">&quot;我是小标题我是小标题我是小标题&quot;</span>);</span><br><span class=\"line\">        BaseDataImpl rightImpl = <span class=\"keyword\">new</span> BaseDataImpl(rightData, IBaseData.TYPE_SECOND);</span><br><span class=\"line\"></span><br><span class=\"line\">        List&lt;BaseDataImpl&gt; dataList = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">        dataList.add(leftImpl);</span><br><span class=\"line\">        dataList.add(rightImpl);</span><br><span class=\"line\"></span><br><span class=\"line\">        MyAdapter myAdapter = <span class=\"keyword\">new</span> MyAdapter(dataList);</span><br><span class=\"line\">        rvContent.setAdapter(myAdapter);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"界面显示效果如下，这样就实现了在同一个recyclerView中显示不同样式的布局。\"><a href=\"#界面显示效果如下，这样就实现了在同一个recyclerView中显示不同样式的布局。\" class=\"headerlink\" title=\"界面显示效果如下，这样就实现了在同一个recyclerView中显示不同样式的布局。\"></a>界面显示效果如下，这样就实现了在同一个recyclerView中显示不同样式的布局。</h4><p><img src=\"http://penney.oss-cn-shenzhen.aliyuncs.com/typora/2021/season1/2021-01-26-121132.png\" alt=\"2021-01-26-121132\"></p>\n","categories":["工作小结"],"tags":["android","recyclerview"]}]